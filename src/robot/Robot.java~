// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import robot.commands.*;
import robot.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */

public class Robot extends TimedRobot {
	
	public static PowerDistributionPanel pdp = new PowerDistributionPanel();

    Command autoCmd;
    SendableChooser<Command> chooser = new SendableChooser<Command>();
    SendableChooser<String> locChooser = new SendableChooser<String>();
    SendableChooser<String> dualChooser = new SendableChooser<String>();  
    SendableChooser<String> firstChooser = new SendableChooser<String>(); 
    SendableChooser<String> secondChooser = new SendableChooser<String>();
    SendableChooser<String> thirdChooser = new SendableChooser<String>();
        
	public static Timer sysTimer = new Timer();
	String fmsGameData;
	Boolean switchLeftLit, scaleLeftLit, switchRightLit, scaleRightLit;
	Boolean printBatVoltFlag;
	public static Preferences prefs;
	String line;
	

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drivetrain drivetrain;
    public static LEDSubSys lEDSubSys;
    public static Logger logger;
    public static I2CsubSys i2CsubSys;
    public static ArmSubSys armSubSys;
    public static ElevSubSys elevSubSys;
    public static IntakeSubSys intakeSubSys;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        printBatVoltFlag = true;
        prefs = Preferences.getInstance();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrain = new Drivetrain();
        lEDSubSys = new LEDSubSys();
        logger = new Logger();
        i2CsubSys = new I2CsubSys();
        armSubSys = new ArmSubSys();
        elevSubSys = new ElevSubSys();
        intakeSubSys = new IntakeSubSys();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addDefault("AutoDoNothingCmdGrp", new AutoDoNothingCmdGrp());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        

        //gameData="   ";
    	locChooser.addDefault ("1 Left", 	"Left");
    	locChooser.addObject("2 Center",	"Ctr");
    	locChooser.addObject ("3 Right", 	"Right");
    	SmartDashboard.putData("Location-Choice",locChooser);

    	firstChooser.addObject("0 Near Switch", "SwitchNear");
    	firstChooser.addObject("1 Near Scale", 	"ScaleNear");
    	firstChooser.addObject("2 Side Scale", 	"SideScale");    	
    	firstChooser.addDefault("3 Line Only",	"Line");  	
    	firstChooser.addObject("4 Do Nothing", "Nothing");
    	SmartDashboard.putData("First-Choice", firstChooser);   	
    	
    	secondChooser.addObject("0 Near Switch", 	"SwitchNear");
    	secondChooser.addObject("1 Near Scale", 	"ScaleNear");
    	secondChooser.addObject("2 Side Scale", 	"SideScale");    	
    	secondChooser.addObject("3 Cross Switch", 	"SwitchCross");
    	secondChooser.addObject("4 Cross Scale", 	"ScaleCross");     	
    	secondChooser.addObject("5 Cross Position", "PosCross");    	
    	secondChooser.addObject("6 Line Only",		"Line");  	
    	secondChooser.addDefault("7 Do Nothing",	"Nothing");
    	SmartDashboard.putData("Second-Choice", secondChooser);   	
    	    	
    	thirdChooser.addObject("0 Cross Switch", 	"SwitchCross");    	
    	thirdChooser.addObject("1 Cross Scale", 	"ScaleCross"); 
    	thirdChooser.addObject("2 Cross Position",  "PosCross");
    	thirdChooser.addObject("3 Line Only", 		"Line");  	
    	thirdChooser.addDefault("4 Do Nothing",		"Nothing");
    	SmartDashboard.putData("Third-Choice", thirdChooser);   	
    	    	    	
    	dualChooser.addDefault ("0 Dual Cube(2)",   "Cube2");    	
    	dualChooser.addObject  ("1 Single Cube", "Single");
    	dualChooser.addObject ("2 Dual Cube(3)", "Cube3");
    	dualChooser.addObject ("3 Dual Cube(4)", "Cube4");    	
    	SmartDashboard.putData("Single/Dual Cube",dualChooser);
    	
    	userInit();
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        fmsGameData = DriverStation.getInstance().getGameSpecificMessage();
        if ((fmsGameData == null) || (fmsGameData.isEmpty())) fmsGameData = "XXX";
    }

    @Override
    public void autonomousInit() {
    	Robot.elevSubSys.elevBrakeOff();
    	Robot.logger.logTimer.reset();
    	Robot.logger.logTimer.start(); 

        autoCmd = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autoCmd != null) autoCmd.start();
    	sysTimer.reset();			// System timer for Competition run
    	sysTimer.start();   
    	Robot.logger.reSetLogTime(); 
    	userInit();
    	
    	line = "******************  AutonomousInit started ******************";
    	Robot.logger.appendLog(line);
    	System.out.println(line);
    	line = "  ***** Battery Voltage = " + pdp.getVoltage() + " *****";
    	Robot.logger.appendLog(line);
    	System.out.println(line);    	
    	DriverStation.Alliance color;
    	color = DriverStation.getInstance().getAlliance();
    	if (color == DriverStation.Alliance.Blue){
    		Robot.logger.appendLog("Alliance Color = BLUE");
    	} else {
    		Robot.logger.appendLog("Alliance Color = RED");
    	}
    	
    	String locChoice = locChooser.getSelected();    	    	
    	String firstChoice = firstChooser.getSelected();
    	String secondChoice = secondChooser.getSelected();    	
    	String thirdChoice = thirdChooser.getSelected();
    	String dualChoice = dualChooser.getSelected();
    	
        switchLeftLit = false;
        switchRightLit = false;
        scaleLeftLit = false;
        scaleRightLit = false;
        
        if(fmsGameData.equals("XXX")) {
        	System.out.println("FMS Data Null");
    		Robot.logger.appendLog("FMS Data Null");
        	return;
        }

        // Check for bad data from MMS for switch position
        if ((fmsGameData.charAt(0) != 'L') && (fmsGameData.charAt(0) != 'R')) {
        	System.out.println("FMS Data Switch Invalid");
    		Robot.logger.appendLog("FMS Data Switch Invalid");
        	return;        	
        }
        // Check for bad data from MMS for scale position
        if ((fmsGameData.charAt(1) != 'L') && (fmsGameData.charAt(1) != 'R')) {
        	System.out.println("FMS Data Scale Invalid");
    		Robot.logger.appendLog("FMS Data Scale Invalid");
        	return;        	
        }

    	if (fmsGameData.charAt(0) == 'L')
    		switchLeftLit = true;	// Makes it easier to read if statements
    	else
    		switchRightLit = true;
    	if (fmsGameData.charAt(1) == 'L')
    		scaleLeftLit = true;
    	else 
    		scaleRightLit = true;
    	
    	
    	line = "*** Autonomous Start Data FMS=" + fmsGameData + " Loc=" + locChoice + " Dual=" + dualChoice;
    	System.out.println(line);
		Robot.logger.appendLog(line);    	
    	line = " First Choice= "    + firstChoice;
    	line += " Second Choice= "  + secondChoice;
    	line += " Third Choice= "   + thirdChoice;
    	System.out.println(line);
		Robot.logger.appendLog(line);
    	    			
    	// ----------------------------------------------------
    	// ------- Check FIRST Choice options -----------------
    	// ----------------------------------------------------
    	if (firstChoice.equals("Nothing")){
    		cmdDoNothing("first");
    		return;
    	}
    	
    	if (firstChoice.equals("Line")) {
    		if ((locChoice.equals("Left")) || (locChoice.equals("Right"))) {
    			cmdLine("first");
    			return;
    		}
    		if ((locChoice.equals("Ctr")) && (switchLeftLit)) {
    			cmdCtrLeftLine("first");
    			return;
    		}
    		if ((locChoice.equals("Ctr")) && (switchRightLit)) {
    			cmdCtrRightLine("first");
    			return;
    		}
    	}
    	   	
    	if (firstChoice.equals("SwitchNear")) {
    		if ((locChoice.equals("Left")) && (switchLeftLit))  {
    			cmdLeftSw("first");
    			return;
    		}
    		if ((locChoice.equals("Right")) && (switchRightLit)) {
    			cmdRightSw("first");
    			return;
    		}
    	}

    	if (firstChoice.equals("ScaleNear")) {
       		if ((locChoice.equals("Left")) && (scaleLeftLit)) {
       			cmdLeftScale("first");
       			return;
       		}
       		if ((locChoice.equals("Right")) && (scaleRightLit)) {
        		cmdRightScale("first");
        		return;
       		}
    	}
    	
    	if (firstChoice.equals("SideScale")) {
       		if ((locChoice.equals("Left")) && (scaleLeftLit)) {
       			cmdLeftSideScale("first");
       			return;
       		}
       		if ((locChoice.equals("Right")) && (scaleRightLit)) {
        		cmdRightSideScale("first");
        		return;
       		}
    	}

    	// --- If Loc is Ctr first choice should always be Switch Near 
    	if (locChoice.equals("Ctr")) {
    		if ((dualChoice.equals("Single")) && (switchLeftLit)) {
    			cmdCtrLeftSw1("first");
    			return;
    		}
    		if ((dualChoice.equals("Single")) && (switchRightLit)) {
    			cmdCtrRightSw1("first");
    			return;
    		}
    		if ((dualChoice.equals("Cube2")) && (switchLeftLit)) {
    			cmdCtrLeftSw2("first");
    			return;
    		}
    		if ((dualChoice.equals("Cube2")) && (switchRightLit)) {
    			cmdCtrRightSw2("first");
    			return;
    		}
    		if ((dualChoice.equals("Cube3")) && (switchLeftLit)) {
    			cmdCtrLeftSw3("first");
    			return;
    		}
    		if ((dualChoice.equals("Cube3")) && (switchRightLit)) {
    			cmdCtrRightSw3("first");
    			return;
    		}
    		if ((dualChoice.equals("Cube4")) && (switchLeftLit)) {
    			cmdCtrLeftSw4("first");
    			return;
    		}
    		if ((dualChoice.equals("Cube4")) && (switchRightLit)) {
    			cmdCtrRightSw4("first");
    			return;
    		}
    	}
    	

    	// ----------------------------------------------------
    	// ------- Check SECOND Choice options -----------------
    	// ----------------------------------------------------
       	if (secondChoice.equals("Nothing")){
    		cmdDoNothing("Second");
    		return;
    	}
    	
    	if (secondChoice.equals("Line")) {
    		if ((locChoice.equals("Left")) || (locChoice.equals("Right"))) {
    			cmdLine("Second");
    			return;
    		}
    	}
    	
    	if (secondChoice.equals("SwitchNear")) {
    		if ((locChoice.equals("Left")) && (switchLeftLit)) {
    			cmdLeftSw("Second");
    			return;
    		}
    		if ((locChoice.equals("Right")) && (switchRightLit)) {
    			cmdRightSw("Second");
    			return;
    		}    		
    	}

    	if (secondChoice.equals("ScaleNear")) {
       		if ((locChoice.equals("Left")) && (scaleLeftLit)) {
       			cmdLeftScale("Second");
       			return;
       		}
       		if ((locChoice.equals("Right")) && (scaleRightLit)) {
        		cmdRightScale("Second");
        		return;
       		}
    	}
    	
    	if (secondChoice.equals("SideScale")) {
       		if ((locChoice.equals("Left")) && (scaleLeftLit)) {
       			cmdLeftSideScale("Second");
       			return;
       		}
       		if ((locChoice.equals("Right")) && (scaleRightLit)) {
        		cmdRightSideScale("Second");
        		return;
       		}
    	}

    	if (secondChoice.equals("SwitchCross")) {
    		if ((locChoice.equals("Left")) && (switchRightLit)) {
    			cmdLeftCrossSw("Second");
    			return;
    		}
    		if ((locChoice.equals("Right")) && (switchLeftLit)) {
    			cmdRightCrossSw("Second");
    			return;
    		}
    	}    	
    	   
    	if (secondChoice.equals("ScaleCross")) {
    		if ((locChoice.equals("Left")) && (scaleRightLit)) {
    			cmdLeftCrossScale("Second");
    			return;
    		}
    		if ((locChoice.equals("Right")) && (scaleLeftLit)) {
    			cmdRightCrossScale("Second");
    			return;
    		}
    	}    	
    	      	
    	if (secondChoice.equals("PosCross")) {
    		if (locChoice.equals("Left"))  {
    			cmdLeftCrossPos("Second");
    			return;
    		}
    		if (locChoice.equals("Right")) {
    			cmdRightCrossPos("Second");
    			return;
    		}
    	}    	
    	      	
    	// ----------------------------------------------------
    	// ------- Check THIRD Choice options -----------------
    	// ----------------------------------------------------
       	if (thirdChoice.equals("Nothing")){
    		cmdDoNothing("Third");
    		return;
    	}
    	
    	if (thirdChoice.equals("Line")) {
    		cmdLine("Third");
    		return;
    	}
    	
    	if (thirdChoice.equals("SwitchCross")) {
    		if ((locChoice.equals("Left")) && (switchRightLit)) {
    			cmdLeftCrossSw("Third");
    			return;
    		}
    		if ((locChoice.equals("Right")) && (switchLeftLit)) {
    			cmdRightCrossSw("Third");
    			return;
    		}
    	}    	
    	   
    	if (thirdChoice.equals("ScaleCross")) {
    		if ((locChoice.equals("Left")) && (scaleRightLit)) {
    			cmdLeftCrossScale("Third");
    			return;
    		}
    		if ((locChoice.equals("Right")) && (scaleLeftLit)) {
    			cmdRightCrossScale("Third");
    			return;
    		}
    	}    	
    	      	
    	if (thirdChoice.equals("PosCross")) {
    		if (locChoice.equals("Left"))  {
    			cmdLeftCrossPos("Third");
    			return;
    		}
    		if (locChoice.equals("Right")) {
    			cmdRightCrossPos("Third");
    			return;
    		}
    	}
    	// Default is to cross line at least
    	if ((locChoice.equals("Right")) || (locChoice.equals("Right"))) {
    		cmdLine("Default");	
    	}
    }


    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    
    // ------------------------------------------------------
    //                         Commands
    // ------------------------------------------------------

    
    // **************************************
   	// *****  Do Nothing/Line Commands   ****   	
    // **************************************
    public void cmdDoNothing(String choice) {
    	line = "Do Nothing Selected ("  + choice + ") - AutoDoNothingCmdGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);
    	autoCmd = new AutoDoNothingCmdGrp();
    	autoCmd.start();	
    }
    public void cmdLine(String choice) {
		// Cross line onto Left/Right Side   	
    	line = "Line Only Selected ("  + choice + ") - AutoLineOnlyCmdGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoLineOnlyCmdGrp();
		autoCmd.start();
		}
    
    // **************************************
   	// **** Center Position Commands ********   	
    // **************************************
    public void cmdCtrRightSw1(String choice) {
		// Place Cube onto Right switch platform from front    	
    	line = "Ctr Right Switch 1 Cube Selected ("  + choice + ") - AutoCtrRCube1Grp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoCtrRCube1Grp();		// Drop Cube in right switch
		autoCmd.start();
		}
    public void cmdCtrLeftSw1(String choice) {
		// Place Cube onto Left switch platform from front    	
    	line = "Ctr Left Switch 1 Cube Selected ("  + choice + ") - AutoCtrLCube1Grp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoCtrLCube1Grp();		// Drop Cube in left switch
		autoCmd.start();
		}
    public void cmdCtrRightSw2(String choice) {
		// Place Cube onto Right switch platform from front    	
    	line = "Ctr Right Switch 2 Cube Selected ("  + choice + ") - AutoCtrRCube2Grp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoCtrRCube2Grp();		// Drop Cube in Right switch
		autoCmd.start();
		}
    public void cmdCtrLeftSw2(String choice) {
		// Place Cube onto Left switch platform from front    	
    	line = "Ctr Left Switch 2 Cube Selected ("  + choice + ") - AutoCtrLCube2Grp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoCtrLCube2Grp();		// Drop Cube in left switch
		autoCmd.start();
		}
    public void cmdCtrRightSw3(String choice) {
		// Place Cube onto Right switch platform from front    	
    	line = "Ctr Right Switch 3 Cube Selected ("  + choice + ") - AutoCtrRCube3Grp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoCtrRCube3Grp();		// Drop Cube in Right switch
		autoCmd.start();
		}
    public void cmdCtrLeftSw3(String choice) {
		// Place Cube onto Left switch platform from front    	
    	line = "Ctr Left Switch 3 Cube Selected ("  + choice + ") - AutoCtrLCube3Grp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoCtrLCube3Grp();		// Drop Cube in left switch
		autoCmd.start();
		}
    public void cmdCtrRightSw4(String choice) {
		// Place Cube onto Right switch platform from front    	
    	line = "Ctr Right Switch 4 Cube Selected ("  + choice + ") - AutoCtrRCube4Grp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoCtrRCube4Grp();		// Drop Cube in Right switch
		autoCmd.start();
		}    
    public void cmdCtrLeftSw4(String choice) {
		// Place Cube onto Left switch platform from front    	
    	line = "Ctr Left Switch 4 Cube Selected ("  + choice + ") - AutoCtrLCube4Grp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoCtrLCube4Grp();		// Drop Cube in left switch
		autoCmd.start();
		}
    public void cmdCtrLeftLine(String choice) {
		// Cross line onto Left switch   	
    	line = "Ctr Left Line Selected ("  + choice + ") - AutoCtrLLineGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoCtrLLineGrp();
		autoCmd.start();
		}
    public void cmdCtrRightLine(String choice) {
		// Cross line onto Right switch   	
    	line = "Ctr Right Line Selected ("  + choice + ") - AutoCtrRLineGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoCtrRLineGrp();
		autoCmd.start();
		}
    
    // **************************************
   	// **** Left Position Commands ********   	
    // **************************************
    public void cmdLeftSw(String choice) {
		// Left Switch   	
    	line = "Left Switch Selected ("  + choice + ") - AutoLeftSwCmdGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoLeftSwCmdGrp();
		autoCmd.start();
		}    
    public void cmdLeftScale(String choice) {
		// Left Scale   	
    	line = "Left Scale Selected ("  + choice + ") - AutoLeftScaleCmdGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoLeftScaleCmdGrp();
		autoCmd.start();
		}
    public void cmdLeftSideScale(String choice) {
		// Left Side Scale   	
    	line = "Left Side Scale Selected ("  + choice + ") - AutoLeftSideScaleGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoLeftSideScaleGrp();
		autoCmd.start();
		}
    public void cmdLeftCrossSw(String choice) {
		// Left Cross Switch   	
    	line = "Left Cross Switch Selected ("  + choice + ") - AutoLeftCrossSwGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoLeftCrossSwGrp();
		autoCmd.start();
		}    
    public void cmdLeftCrossScale(String choice) {
		// Left Cross Scale   	
    	line = "Left Cross Scale Selected ("  + choice + ") - AutoLeftCrossScaleGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoLeftCrossScaleGrp();
		autoCmd.start();
		}    
    public void cmdLeftCrossPos(String choice) {
		// Left Cross Position   	
    	line = "Left Cross Position Selected ("  + choice + ") - AutoLeftCrossPosGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoLeftCrossPosGrp();
		autoCmd.start();
		}    
    
    // **************************************
   	// **** Right Position Commands ********   	
    // **************************************
    public void cmdRightSw(String choice) {
		// Right Switch   	
    	line = "Right Switch Selected ("  + choice + ") - AutoRightSwCmdGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoRightSwCmdGrp();
		autoCmd.start();
		}    
    public void cmdRightScale(String choice) {
		// Right Scale   	
    	line = "Right Scale Selected ("  + choice + ") - AutoRightScaleCmdGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoRightScaleCmdGrp();
		autoCmd.start();
		}
    public void cmdRightSideScale(String choice) {
		// Right Side Scale   	
    	line = "Right Side Scale Selected ("  + choice + ") - AutoRightSideScaleGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoRightSideScaleGrp();
		autoCmd.start();
		} 
    public void cmdRightCrossScale(String choice) {
		// Right Cross Scale   	
    	line = "Right Cross Switch Selected ("  + choice + ") - AutoRightCrossScaleGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoRightCrossScaleGrp();
		autoCmd.start();
		}    
    public void cmdRightCrossSw(String choice) {
		// Right Cross Switch   	
    	line = "Right Cross Scale Selected ("  + choice + ") - AutoRightCrossSwGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoRightCrossSwGrp();
		autoCmd.start();
		}    
    public void cmdRightCrossPos(String choice) {
		// Right Cross Position  	
    	line = "Right Cross Position Selected ("  + choice + ") - AutoRightCrossPosGrp";
    	System.out.println(line);
    	Robot.logger.appendLog(line);  	
		autoCmd = new AutoRightCrossPosGrp();
		autoCmd.start();
		}    
    
    // ------------------------------------------------------------
    // ------------------------------------------------------------      
    

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
    	Robot.elevSubSys.elevBrakeOff();
    	if (autoCmd != null) autoCmd.cancel();
    	Robot.logger.appendLog("******************  TeleopInit started ******************");
    	line = "  ***** Battery Voltage = " + pdp.getVoltage() + " *****";
    	Robot.logger.appendLog(line);
    	System.out.println(line); 
    	Robot.logger.printLog();		// write out logfile from autonomous run
    	} 
    
 

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        //show/log battery voltage every 15 seconds
        if ((sysTimer.get() % 15) <= 1) {
			if (printBatVoltFlag) {
				printBatVoltFlag = false;		// only want to print once every 15 seconds
				line =  "  ***** Battery Input Voltage = " 	+ pdp.getVoltage() ;
				line +=	"  Battery Total Current = " 		+ pdp.getTotalCurrent() + " *****" ;
				Robot.logger.appendLog(line);
				System.out.println(line); 
			}
        } else {
        	// one second has expired reset print flag
        	printBatVoltFlag = true;
        }
    }
    
    public void userInit() {
    	Robot.drivetrain.resetGyro();
    	Robot.drivetrain.resetEncodersAndStats();
    	Robot.drivetrain.resetPosition(true); 
    	sysTimer.reset();			// System timer for Competition run
    	sysTimer.start();  
    }
}
