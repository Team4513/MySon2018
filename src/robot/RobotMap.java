// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX drivetrainLeftFrontMtr;
    public static WPI_TalonSRX drivetrainRightFrontMtr;
    public static DifferentialDrive drivetrainRobotDrive;
    public static AnalogInput drivetrainSonar;
    public static SpeedController lEDSubSysLEDCtrlr;
    public static WPI_TalonSRX armSubSysArmMtrCtlr;
    public static AnalogPotentiometer armSubSysarmPotentiometer;
    public static DigitalInput armSubSysarmLwrLmtSw;
    public static DigitalInput armSubSysArmUpperLmtSw;
    public static WPI_TalonSRX elevSubSysElevMtrCtlr;
    public static AnalogPotentiometer elevSubSysElevPotentiometer;
    public static DigitalInput elevSubSysElevLwrLmtSw;
    public static DigitalInput elevSubSysElevUpperLmtSw;
    public static SpeedController elevSubSysElevBrakeCtlr;
    public static SpeedController intakeSubSysIntakeMtr;
    public static SpeedController intakeSubSysIntakeLeftMtr;
    public static SpeedController intakeSubSysIntakeRightMtr;
    public static AnalogInput intakeSubSysIntakeSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainLeftFrontMtr = new WPI_TalonSRX(3);
        
        
        drivetrainRightFrontMtr = new WPI_TalonSRX(2);
        
        
        drivetrainRobotDrive = new DifferentialDrive(drivetrainLeftFrontMtr, drivetrainRightFrontMtr);
        LiveWindow.addActuator("Drivetrain", "RobotDrive", drivetrainRobotDrive);
        drivetrainRobotDrive.setSafetyEnabled(false);
        drivetrainRobotDrive.setExpiration(0.1);
        drivetrainRobotDrive.setMaxOutput(1.0);

        drivetrainSonar = new AnalogInput(2);
        LiveWindow.addSensor("Drivetrain", "Sonar", drivetrainSonar);
        
        lEDSubSysLEDCtrlr = new Spark(0);
        LiveWindow.addActuator("LEDSubSys", "LEDCtrlr", (Spark) lEDSubSysLEDCtrlr);
        lEDSubSysLEDCtrlr.setInverted(false);
        armSubSysArmMtrCtlr = new WPI_TalonSRX(5);
        
        
        armSubSysarmPotentiometer = new AnalogPotentiometer(1, 5.0, 0.0);
        LiveWindow.addSensor("ArmSubSys", "armPotentiometer", armSubSysarmPotentiometer);
        
        armSubSysarmLwrLmtSw = new DigitalInput(3);
        LiveWindow.addSensor("ArmSubSys", "armLwrLmtSw", armSubSysarmLwrLmtSw);
        
        armSubSysArmUpperLmtSw = new DigitalInput(2);
        LiveWindow.addSensor("ArmSubSys", "ArmUpperLmtSw", armSubSysArmUpperLmtSw);
        
        elevSubSysElevMtrCtlr = new WPI_TalonSRX(6);
        
        
        elevSubSysElevPotentiometer = new AnalogPotentiometer(0, 5.0, 0.0);
        LiveWindow.addSensor("ElevSubSys", "ElevPotentiometer", elevSubSysElevPotentiometer);
        
        elevSubSysElevLwrLmtSw = new DigitalInput(0);
        LiveWindow.addSensor("ElevSubSys", "ElevLwrLmtSw", elevSubSysElevLwrLmtSw);
        
        elevSubSysElevUpperLmtSw = new DigitalInput(1);
        LiveWindow.addSensor("ElevSubSys", "ElevUpperLmtSw", elevSubSysElevUpperLmtSw);
        
        elevSubSysElevBrakeCtlr = new Spark(9);
        LiveWindow.addActuator("ElevSubSys", "ElevBrakeCtlr", (Spark) elevSubSysElevBrakeCtlr);
        elevSubSysElevBrakeCtlr.setInverted(false);
        intakeSubSysIntakeMtr = new Talon(19);
        LiveWindow.addActuator("IntakeSubSys", "IntakeMtr", (Talon) intakeSubSysIntakeMtr);
        intakeSubSysIntakeMtr.setInverted(false);
        intakeSubSysIntakeLeftMtr = new Spark(6);
        LiveWindow.addActuator("IntakeSubSys", "IntakeLeftMtr", (Spark) intakeSubSysIntakeLeftMtr);
        intakeSubSysIntakeLeftMtr.setInverted(false);
        intakeSubSysIntakeRightMtr = new Spark(7);
        LiveWindow.addActuator("IntakeSubSys", "IntakeRightMtr", (Spark) intakeSubSysIntakeRightMtr);
        intakeSubSysIntakeRightMtr.setInverted(false);
        intakeSubSysIntakeSensor = new AnalogInput(3);
        LiveWindow.addSensor("IntakeSubSys", "IntakeSensor", intakeSubSysIntakeSensor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
