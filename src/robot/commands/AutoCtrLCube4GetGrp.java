// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import robot.subsystems.*;

/**
 *
 */
public class AutoCtrLCube4GetGrp extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutoCtrLCube4GetGrp() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    	
    	// ******************************************************************************************
    	// 							 Pickup Second Front Cube on Left Switch						* 
    	// ******************************************************************************************
    	
    	// ------ Turn on retraction and drive in to get cube ------
    	addParallel(new 	IntakeAutoRetractCmd());
    	
        // 					DriveFwd2Cmd  (  dist,   pwr,  hdg,  Mode, TO,  BrakeFlag, LimitOveride)
    	addSequential(new 	DriveFwd2Cmd  (  30.0,  0.65,  +30.0,   1,   3,    false,     false));
    	addSequential(new   DriveBrakeCmd (  3.0));
    	
    	addSequential(new 	DelayCmd(0.3));    	

       	addSequential(new 	DriveFwd2Cmd   ( -30.0,   0.65, +30.0,   1,   3,    false,     false));
    	addSequential(new 	DriveBrakeCmd  (  3.0));

    	// ----- Raise Arm to Switch position ----
       	//					armToPosCmd(position,  speed, mode,   timeOut
    	addParallel(new 	armToPosCmd("Switch",   0.0,   3.0,    3.0)); 
    	
    	// ----- Point turn and drive arc back to front of switch -----
    	//										( turnAngle,  mode,    TO )
    	addSequential(new DrivePointTurnPidCmd	(  -60.0,        0,    3.0));    	

    	// ------Forward Arc turn to Right ------
       	//				  DriveArcTurnCmd( leftPwr, rightPwr, dist, hdg, mode, TO, BrakeFlag,  PIDMode)
    	addSequential(new DriveArcTurnCmd(   +0.85,    +0.25,   0,  -5,   1,   5,    false,     false));
    	
    	// 	----- Place cube on Left Switch -----
        // 					DriveFwd2Cmd (  dist,   pwr,   hdg,  Mode, TO,  BrakeFlag, LimitOveride)
    	addSequential(new 	DriveFwd2Cmd (  3.0,   0.65,   0.0,   1,    3,    false,     false));
    	addSequential(new 	IntakeEjectCmd());
    	addSequential(new 	DriveBrakeCmd (  2.0));
    	
    	// ******************************************************************************************
    	// 								 Setup for Teleop											* 
    	// ******************************************************************************************    	

    	// ------ lower arm/elev to bottom after 0.3 sec delay ------
       	addParallel(new 	LiftToSwitch4CmdGrp		() ); 

    	
    	 // 				DriveFwd2Cmd (  dist,   pwr,   hdg,  Mode, TO,  BrakeFlag, LimitOveride)
    	addSequential(new 	DriveFwd2Cmd (  -24.0,   0.65,  0.0,   1,    3,    false,     false));
    	
    	//					    					( turnAngle,  mode,    TO )
    	addSequential(new 	DrivePointTurnPidCmd	(  45.0,         0,    3.0));
 
    } 
}
