// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;
import robot.commands.DriveFwd2Cmd.DriveMode;

/**
 *
 */
public class DelayByDistCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_Dist;
    private int m_Mode;
    private double m_TO;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
    String line;
    double mCurrDist;
    Timer startTmr;
    public enum DriveMode { START, DRIVING, ATEND, DONE };
    private DriveMode mDriveState = DriveMode.START;	// this keeps track of our current drive mode
    
    final double START_TIME = 0.08;				// Time to wait for motors to start moving robot
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DelayByDistCmd(double Dist, int Mode, double TO) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_Dist = Dist;
        m_Mode = Mode;
        m_TO = TO;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	setTimeout(m_TO);
    	line = " ** Starting DelayByDistCmd (Dist=" + m_Dist + " Mode=" + m_Mode + " TO=" + m_TO + ")   **" ;
    	Robot.logger.appendLog(line);
    	System.out.println(line);
    	mDriveState = DriveMode.START;	// this keeps track of our current drive mode
    	startTmr = new Timer();
    	startTmr.reset();
    	startTmr.start();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
      	// ---- Look up key data to start ----
    	mCurrDist = Robot.drivetrain.getAverageDist();

    	// ----- State 0 (Initial Stopped State) -----
    	if (mDriveState == DriveMode.START){
    		// were are just starting, we need to move check timer for motion
    		if(startTmr.get() > START_TIME) {
    			// we should be moving now
        		mDriveState = DriveMode.DRIVING;    			
    		}
    	}
    	
    	// ----- State 1 (Driving to End target) -----
    	if ((mDriveState == DriveMode.DRIVING) && (mCurrDist >= m_Dist )) {
    		// we're all done just exit
			mDriveState = DriveMode.ATEND;
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	if (isTimedOut()) {
    		// Cmd has timed out
    		line = "DelayByDistCmd - Has TIMED OUT !!";
    		Robot.logger.appendLog(line);
    		System.out.println(line) ; 
    		return true;				// used in all modes
    	}
    	
    	if (mDriveState == DriveMode.ATEND) return true;
    	
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
		line = "DelayByDistCmd has ended !!";
		Robot.logger.appendLog(line);
		System.out.println(line) ;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
