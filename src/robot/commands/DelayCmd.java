// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;

/**
 *
 */
public class DelayCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private Double m_TO;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    String line;
    Timer delayTmr;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DelayCmd(Double TO) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_TO = TO;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	setTimeout(m_TO);		// At one time the passed parameter was'nt being initialized correctly so hard coded time
    	line = " ** Starting DelayCmd (DelayTime=" + m_TO +")  **" ;
    	Robot.logger.appendLog(line);
    	System.out.println(line);
    	delayTmr = new Timer();
    	delayTmr.reset();
    	delayTmr.start();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// nothing to do here but wait
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if (delayTmr.get() >= m_TO) return true;   	
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	System.out.println("Delay Cmd End");
    	Robot.logger.appendLog("Delay Cmd End");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
