// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;

/**
 *
 */
public class DriveByJoystickCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	public static final double TWISTTHROTTLEMOD = 1.25;			//reserves memory for variable/attribute TWISTTHROTTLEMOD which is a constant
	private static final double XYDEADBAND = 0.1;					//reserves memory for variable/attribute XYDEADBAND which is a constant
	private double 	TWISTDEADBAND = 0.025;						//reserves memory for variable/attribute TWISTDEADBAND which is a constant
	private double throttle, yValue, twistValue;				// joystick working variable	
	private Joystick joy;
	private double joyXaxis, joyYaxis, joyTwist, joyThrottle, joyReverse;
	public double motorSpeed,motorAngle;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveByJoystickCmd() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	//Robot.logger.appendLog("Starting DriveByJoystickCmd");
    	//System.out.println("DriveByJoystick Init");
    	joy = Robot.oi.driverJoystick;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// check to see if trigger is pushed
    	if (Robot.oi.getDriverJoystick().getRawButton(1) == true) { // Joystick is activated !
			calcMotorSpeedAngle();
			Robot.drivetrain.driveByJoystick(motorSpeed,motorAngle);
			if (Robot.oi.getDriverJoystick().getRawButton(7) == true) {
				Robot.drivetrain.setLoggingOn();		// set flag so logging can occur
				Robot.drivetrain.logDrivetrain();		// send log record
				Robot.drivetrain.setLoggingOff();		// set flag so logging can occur
			}
    	}
		else {
	    	Robot.drivetrain.stopMtrs();   	
		}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drivetrain.stopMtrs();
    	//Robot.logger.appendLog("Ending DriveByJoystickCmd");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
    
    // --------------------------------------------------------------------------------
    //     Calculate for Motor Reversing, Slow-Speed, Deadband and Throttle Adjustment
    // --------------------------------------------------------------------------------    
    
    void calcMotorSpeedAngle() {
       	joyXaxis = joy.getX();								// Get X axis
    	joyYaxis = joy.getY();
    	joyReverse = 0;
    	if (joy.getRawButton(11) == true){					// Check if Reverse Orientation Button Pressed
    		joyYaxis = joyYaxis * -1;						// reverse direction
    		joyReverse = 1;
    	}
    	yValue=joyYaxis;									// sets y value of joystick to variable YValue
    	joyTwist = joy.getTwist();
    	joyThrottle = joy.getThrottle();
    	throttle=((joyThrottle-1)/-2);						// converts range to 0 to +1

     	// ---------------------------------------------------------------
     	// ----- Calculate Motor Speed using XYDEADBAND and throttle   ---
     	// ---------------------------------------------------------------
      	// Deadband Calculation
     	if((yValue <= XYDEADBAND) && (yValue >= -XYDEADBAND)){
     		yValue=0;									// if YValue is within the deadband, don't move
     	}
     	else {
     		if (yValue >= 0) {
     			yValue=(yValue - XYDEADBAND) * (1 + XYDEADBAND);		// Scale Yvalue t0 0 to + 1
     		}
     		else {
     			yValue = - (-yValue - XYDEADBAND) * (1 + XYDEADBAND);	// Scale Yvalue t0 0 to -1
     		}
     	}

     	// Throttle Calculation
     	motorSpeed = yValue * throttle;

     	// Slow Speed Calculation
     	if (joy.getRawButton(2) == true){					// we HAVE pressed for slower speed so go slower
     		motorSpeed = motorSpeed * 0.5;
     	}

     	// Correct for Axis polarity
     	motorSpeed = motorSpeed*-1;

     	// ------------------------------------------------------------------------
     	// ----------------- Calculate Twist Value --------------------------------
     	// ------------------------------------------------------------------------
    	twistValue = joyTwist;								// sets twist value of joystick to variable TwistValue
     	if((twistValue <= TWISTDEADBAND) && (twistValue >= -TWISTDEADBAND)) {
     		twistValue=0;									// if YValue is within the deadband, don't move
     	}
    	else {
    		if (twistValue >= 0) {
    			twistValue=(twistValue - TWISTDEADBAND) * (1 + TWISTDEADBAND);		// Scale Yvalue t0 0 to + 1
    		}
    		else {
    			twistValue = - (-twistValue - TWISTDEADBAND) * (1 + TWISTDEADBAND);	// Scale Yvalue t0 0 to -1
    		}
    	}

     	// Twist adjusted by TWISTTHROTTLEMOD value Calculation
    	if (joy.getRawButton(2) == true){
    		// we have pressed for slower rotation speed so go slower
    		twistValue = (twistValue/TWISTTHROTTLEMOD) * 0.8;
    	} else {
    		// we have not pressed so go for faster rotation speed
    		twistValue = twistValue/TWISTTHROTTLEMOD;
    	}
    	//motorAngle = twistValue * -1;
    	motorAngle = twistValue * throttle;;
    }
}
