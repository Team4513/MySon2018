// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import java.util.Vector;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;
import robot.utils.*;

/**
 *
 */
public class DrivePointTurnCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_Angle;
    private double m_Speed;
    private double m_Timeout;
    private double m_Mode;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    
    String line;
 	NetworkTable netTable;
 	Vector<String> keys = new Vector();

 	Timer stopTmr = new Timer();
 	int state, turnDir, overShootFlag;
 	double startHdg, endHdg, currHdg, tmpHdg, currAngle;
 	double tmpDestHdg, tmpCurrHdg, diff;

 	double brakePwr = 0.15;
 	double brakeTm = 0.15;
 	double ltOvershoot = 2;
 	double rtOvershoot = 4;
 	double tstSpeed = 0.6;

 	// ---- Various Constants ----
 	final double kEncoderConvPtTurn = 0.142245; // degrees per encoder
 	final double kFastTurnSpeed = 0.8;
 	final double kMedTurnSpeed = 0.5;
 	final double kSlowTurnSpeed = 0.2;
 	
 	int LeftEncoderValue;
 	int RightEncoderValue;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
 		public DrivePointTurnCmd(double Angle, double Speed, double Timeout, double Mode) {
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    	m_Angle = Angle;
        m_Speed = Speed;
        m_Timeout = Timeout;
        m_Mode = Mode;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	// Mode 0 = use angle for turn
    	// Mode 1 = use angle as Hdg
    	
    	Robot.drivetrain.setLoggingOn();
    	setTimeout(m_Timeout);
    	stopTmr.reset();
    	//GetTestData();
    	//m_Speed = tstSpeed;
    	startHdg = Robot.drivetrain.getGyroHeading();

    	// ------- Determine End Heading from Mode Flag and angle --------
    	if (m_Mode == 0) {
    		// Turn given m_Angle into a heading value
    		endHdg = Rmath.addAngleToHdg(startHdg, m_Angle); 
    	} else if (m_Mode == 1) {
    		// Turn to given Hdg as provided in m_Angle field
    		endHdg = m_Angle;
    	}

    	// ---- Check for left or Right Turn ----
    	diff = Rmath.calcHdgDiff(startHdg, endHdg);
    	calcDir(endHdg);

    	state = 3;									// Default mode = 3 go to final destination hdg
    	if (turnDir > 0) System.out.println("Right Turn indicated currHg=" + String.valueOf(currHdg) + 
    															" endHdg=" + String.valueOf(endHdg));
    	if (turnDir < 0) System.out.println("Left Turn indicated currHg=" + String.valueOf(currHdg) +
    														   " endHdg=" + String.valueOf(endHdg));

    	// ---- Check if we need to overshoot and return to ending heading ----
    	tmpHdg = 0;
    	if ((turnDir > 0) && (diff <= rtOvershoot)) {
    		state = 0;
    		tmpHdg = endHdg + rtOvershoot + ltOvershoot + 5;
    		System.out.println("Right Overshoot req. currHg=" + String.valueOf(currHdg) +
    											   " tmpHdg=" + String.valueOf(tmpHdg));
    	}
    	if ((turnDir < 0) && (-diff <= ltOvershoot)) {
    		state = 0;
    		tmpHdg = endHdg - ltOvershoot - rtOvershoot - 5;
    		System.out.println("Left Overshoot req. currHg=" + String.valueOf(currHdg) +
    										      " tmpHdg=" + String.valueOf(tmpHdg));
    	}
    	tmpHdg = Rmath.constrainDeg0To360(tmpHdg);
    	
    	line = "Debug, Drivetrain, Starting DrivePointTurnCmd";
    	line += " StartHdg=" + String.valueOf(startHdg) +  " endHdg=" + String.valueOf((endHdg));
    	line += " tmpHdg=," + String.valueOf(tmpHdg);
    	Robot.logger.appendLog(line);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	// state 0=moving to tmpHdg
    	// state 1=Reached tmpHdg time to apply brakes
    	// state 2=Stopping at TmpHdg waiting for timeout on brakes
    	// state 3=moving to endHdg
    	// state 4=Reached endHdg time to apply brakes
    	// state 5=Stopping at Final Hdg waiting for timeout on brakes
    	// state 6= Time To exit

    	currHdg = Robot.drivetrain.getGyroHeading();
    	System.out.println("Begining of exec section State=" + String.valueOf(state));

    	// -- Check for arriving at destination
    	if (state == 0)  checkForDest(tmpHdg);				// If we have Not reached dest. keep moving
    	if (state == 3)  checkForDest(endHdg);

    	// -----  we have reached our dest hdg time to apply brakes ----
    	if ((state == 1) || (state == 4)){
    		System.out.println("State 1 or 4 detected currHg=" + String.valueOf(currHdg) +
    												  "state=" + String.valueOf(state));
    		stopTmr.reset();
    		stopTmr.start();
    		if (state == 1) state = 2;						// we were heading to tmpHdg
    		if (state == 4) state = 5;						// we were heading to endHdg
    		if (turnDir < 0){								// We're turning left apply right brakes
    			System.out.println("Right brake being applied currHg=" + String.valueOf(currHdg) +
    														  "state=" + String.valueOf(state));
    			Robot.drivetrain.tankDrive(+brakePwr, -brakePwr); }
    		else {											// We're turning Right apply left brakes
    			System.out.println("Left brake being applied currHg=" + String.valueOf(currHdg));
    			Robot.drivetrain.tankDrive((-brakePwr*1.25), +brakePwr); }	// provide MORE left braking !!
    	}

    	// ----- Check to see if time to stop brakes ----
    	if ((state == 2) || (state == 5)) {
    		System.out.println("State 2 or 5 detected currHg=" + String.valueOf(currHdg) +
    												  "state=" + String.valueOf(state));
    		System.out.println("StopTmr"  + String.valueOf(stopTmr.get()) +
    						  " brakeTm=" + String.valueOf(brakeTm));
    		if (stopTmr.get() >= brakeTm) {
    			System.out.println("Brake time has been exceeded" + String.valueOf(state));

    			if (state == 2)	{								// Were now setting up for final leg
    				System.out.println("State 2 re calculating diff and dir state=" + String.valueOf(state));
    				diff = Rmath.calcHdgDiff(currHdg, endHdg);
    				calcDir(endHdg);
    				state = 3;
    			}
    			if (state == 5)	{
    				System.out.println("State 5 -> changing to state=6" + String.valueOf(state));
    				state = 6;						// were all done
    			}
    			Robot.drivetrain.tankDrive( 0, 0);
    			System.out.println("Brake time reached currHg=" + String.valueOf(currHdg) +
    															  String.valueOf(m_Mode));
    		}
    	}

    	// --- Keep on Moving in Turn ------
    	if ((state == 0 ) || (state == 3)) {
    		System.out.println("Keep On Moving State (0 or 3) state=" + String.valueOf(state));
    		if (turnDir > 0) Robot.drivetrain.tankDrive(m_Speed,-m_Speed);		// Right turn
    		if (turnDir < 0) Robot.drivetrain.tankDrive(-m_Speed,m_Speed);		// Left turn
    	}
    	//System.out.println("End of exec section State=" + String.valueOf(state) + "Speed " + String.valueOf(m_Speed));

    	Robot.drivetrain.putZoneData( 2, endHdg, diff, endHdg, diff );		// update tgt remaining param #3 fixed at 0
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
       	if (isTimedOut()){
    		System.out.println("Drive Pt Turn Timed OUT !");
    		return true;
    	}
    	if (state == 6) return true;

        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	System.out.println("DrivePTturnCmd Ending Hdg =" + String.valueOf(Robot.drivetrain.getGyroHeading()));
    	Robot.logger.appendLog("Ending DrivePointTurnCmd");
    	Robot.drivetrain.putZoneData( 0, 0, 0, 0, 0);					// Stop logging distance to tgt
    	Robot.drivetrain.stopMtrs();

    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
    

  //------------ Determine if we have reached target hdg --------------------
  void checkForDest(double destHdg){
	  diff = Rmath.calcHdgDiff(currHdg, destHdg);
	  // ---- Check if we have reached our destination
	  if (((turnDir > 0 ) && ((diff - rtOvershoot) <= 0 )) ||
		  ((turnDir < 0 ) && ((diff + ltOvershoot) >= 0 ))) {
  				if (state == 0)	state = 1;					// Setup to apply brakes
  				if (state == 3) state = 4;					// We're moving to endHdg setup to apply brakes
  	}
  	return;
  }


  void calcDir(double Hdg){
  	if (diff >= 0) turnDir = +1;							// Right Turn
  	if (diff < 0)  turnDir = -1;							// Left Turn
  }

  //------------------------ Get System Test Default Values --------------------
  void getTestData(){
  	netTable = netTable.getSubTable("Preferences");
  	tstSpeed = netTable.getEntry("PtSpeed").getDouble(0);  	
  	brakeTm = netTable.getEntry("PtBrakeTm").getDouble(0);
  	brakePwr = netTable.getEntry("PtBrakePwr").getDouble(0);
  	ltOvershoot = netTable.getEntry("PtLfOS").getDouble(0);
  	rtOvershoot = netTable.getEntry("PtRtOS").getDouble(0);
  }


}
