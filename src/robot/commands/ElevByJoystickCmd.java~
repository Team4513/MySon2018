// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;

/**
 *
 */
public class ElevByJoystickCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
	private double joyYaxis, yValue, joyThrottle, throttle, motorSpeed;
	private double DEADBAND = 0.1;
	Joystick joyCo,joyDrive;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ElevByJoystickCmd() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.elevSubSys);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	joyCo= Robot.oi.coPilotJoystick;
    	joyDrive=Robot.oi.driverJoystick;
    	//System.out.println("elevByJoystickCmd has Started");
      	Robot.elevSubSys.stopPID();						// Just in case it was running
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	if (joyCo.getRawButton(2) == false) {
        	Robot.elevSubSys.elevHoldMtr();				// *** Change this to hold speed
    	} else {
    		calcElevMtrSpd();
    		Robot.elevSubSys.elevMoveMtr(motorSpeed);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	//Robot.elevSubSys.elevHoldMtr();				// cant use on test machine
    	Robot.elevSubSys.elevStopMtr();
    	//System.out.println("elevByJoystickCmd has ended");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
    void calcElevMtrSpd(){
    	joyYaxis = joyCo.getY();   					//get joystick value
    	yValue = joyYaxis * -1;							
    	joyThrottle = joyCo.getThrottle();			//get throttle value
    	throttle = (((joyThrottle * -1) +1 ) / 2);				//adjust throttle value from -1 to 1 => 0 to 1

    	//Calculate Deadband
    	if (Math.abs(yValue)<= DEADBAND) {			//test to see if joystick is within deadband
    		yValue=0;
    	}
    	
    	else {
    		if(yValue>=0){
    			yValue= ((yValue-DEADBAND) * (1+DEADBAND));	//adjust yValue to disclude DEADBAND 
    		}
    		else{
    			yValue= -((-yValue-DEADBAND) * (1+DEADBAND));
    		}
    	}
    	//motorSpeed= (yValue * throttle* -1)+ Robot.elevSubSys.KHoldSpeed;
    	motorSpeed= (yValue * -1)+ Robot.elevSubSys.KHoldSpeed;
    }

}
